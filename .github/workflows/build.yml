name: Rust

on:
  push:
    paths:
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - 'src/**'
      - '.github/**/*.yml'
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - run: pwd && ls -lah
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: intg-hass
      # BEGIN temporary workaround until api-model-rs is public
      - name: Checkout API model crate
        uses: actions/checkout@v3
        with:
          repository: aitatoi/api-model-rs
          path: api-model-rs
          token: ${{ secrets.PAT_BUILD_USER }}
      - name: Create Workspace
        run: |
          cat > Cargo.toml << ENDOFFILE
          [workspace]
          members = [
          "api-model-rs",
          "intg-hass",
          ]  
          ENDOFFILE
          cp intg-hass/Cargo.lock ./
      # END workaround
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - name: Check source formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          path: intg-hass
      # BEGIN temporary workaround until api-model-rs is public
      - name: Checkout API model crate
        uses: actions/checkout@v3
        with:
          repository: aitatoi/api-model-rs
          path: api-model-rs
          token: ${{ secrets.PAT_BUILD_USER }}
      - name: Create Workspace
        run: |
          cat > Cargo.toml << ENDOFFILE
          [workspace]
          members = [
          "api-model-rs",
          "intg-hass",
          ]  
          ENDOFFILE
          cp intg-hass/Cargo.lock ./
      # END workaround

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - name: Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings
      - name: Build
        run: |
          cargo --version
          cargo build
      - name: Run tests
        run: cargo test --verbose
